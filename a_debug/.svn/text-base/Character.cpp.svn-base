#include <iostream>
#include "Character.hpp"

Character::Character(int x, int y, std::string name, int nbVies, int nbBomb)
{
  this->_x = x;
  this->_y = y;
  this->_name = name;
  this->_nbVies = nbVies;
  this->_nbBomb = nbBomb;
  this->nBomb = nbBomb;
  this->token = false;
  this->marvin.initialize();
}

Character::Character(Character const &other)
{
  this->_x = other._x;
  this->_y = other._y;
  this->_name = other._name;
  this->_nbVies = other._nbVies;
  this->_nbBomb = other._nbBomb;
  this->nBomb = other._nbBomb;
}

Character&	Character::operator=(Character const &other)
{
  if (this != &other)
    {
      this->_x = other._x;
      this->_y = other._y;
      this->_name = other._name;
      this->_nbVies = other._nbVies;
      this->_nbBomb = other._nbBomb;
      this->nBomb = other._nbBomb;
    }
  return *this;
}

int		Character::getPosX() const
{
  return this->_x;
}

int		Character::getPosY() const
{
  return this->_y;
}

int		Character::getNbPlayer() const
{
  return this->_nbPlayer;
}

std::string	Character::getName() const
{
  return this->_name;
}

int		Character::getNbVies() const
{
  return this->_nbVies;
}

int		Character::getNbBomb(void) const
{
  return this->_nbBomb;
}

std::queue<Bomb *>	Character::getListBomb(void) const
{
  return this->listBomb;
}

bool		Character::getToken(void) const
{
  return this->token;
}

bool		Character::getShield(void) const
{
  return this->shield;
}

void		Character::setPosX(int x)
{
  this->_x = x;
}

void		Character::setPosY(int y)
{
  this->_y = y;
}

void		Character::setName(std::string &name)
{
  this->_name = name;
}

void		Character::setNbPlayer(int nb)
{
  this->_nbPlayer = nb;
}

void		Character::setNbVies(int vies)
{
  this->_nbVies = vies;
}

void		Character::setNbBomb(int nb)
{
  this->_nbBomb = nb;
}

void		Character::setNBomb(int nb)
{
  this->nBomb = nb;
}

void		Character::setToken(bool token)
{
  this->token = token;
}

void		Character::setShield(bool shield)
{
  this->shield = shield;
}

void		Character::fillBomb(void)
{
  this->_nbBomb = this->nBomb;
}

void		Character::addBomb(int x_, int y_)
{
  Bomb		*nwBomb = new Bomb;

  nwBomb->setX(x_);
  nwBomb->setY(y_);
  nwBomb->setExpl(false);
  this->listBomb.push(nwBomb);
}

void		Character::addExplo(void)
{
  this->listBomb.front()->createExplo(link);
}

void		Character::eraseBomb(void)
{
  this->listBomb.pop();
}

static void	*activeShield(void *i)
{
  Character	*tmp = (Character *)i;

  sleep(2);
  tmp->setShield(false);
  pthread_exit(0);
}

void		Character::stateOfGrace(void)
{
  this->setShield(true);
  pthread_create(&this->_shield, NULL, activeShield, this);
}


void		Character::affichePosition(int x, int y)
{
  std::cout << "Position du Joueur : " << std::endl << " x [" << x << "] y [" << y << "]" << std::endl;
}

Character::~Character()
{
}
