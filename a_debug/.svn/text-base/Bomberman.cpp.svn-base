#include "Bomberman.hpp"

Bomberman::Bomberman()
{
}

Bomberman::~Bomberman()
{
}

int	Bomberman::getXMap(void) const
{
  return (this->xMap);
}

int	Bomberman::getYMap(void) const
{
  return (this->yMap);
}

std::map<nbPlayer, Character*>	Bomberman::getlistPlayer() const
{
  return this->listPlayer;
}

void	Bomberman::createPlayer(int x, int y, std::string &name, nbPlayer nb, int color)
{
  Character	*player = new Character;

  player->setPosX(x);
  player->setPosY(y);
  player->setName(name);
  player->setNbPlayer(nb);
  player->link = this;
  player->marvin.setColor(color);
  player->marvin.position_.x = x;
  player->marvin.position_.y = y;
  this->listPlayer[nb] = player;
}

void	Bomberman::demolitionWall(int x, int y)
{
  for (std::list<t_pos>::iterator it = this->listFakeWall.begin(); it != this->listFakeWall.end(); ++it)
    if ((*it).x == x && (*it).y == y)
      it = listFakeWall.erase(it);
}

void		Bomberman::death(int x, int y)
{
  for (int i = PLAYER1; this->listPlayer[(nbPlayer)i] != NULL; ++i)
    {
      if (this->listPlayer[(nbPlayer)i]->getPosX() == x &&
      	  this->listPlayer[(nbPlayer)i]->getPosY() == y)
	if (this->listPlayer[(nbPlayer)i]->getShield() == false)
	  {
	    this->listPlayer[(nbPlayer)i]->stateOfGrace();
	    this->listPlayer[(nbPlayer)i]->setNbVies(this->listPlayer[(nbPlayer)i]->getNbVies() - 1);
	  }
    }
}

void		Bomberman::stockPosInList(int x, int y)
{
  t_pos		tmp;

  tmp.x = x;
  tmp.y = y;
  this->listMur.push_back(tmp);
}

void		Bomberman::stockPosInlistFakeWall(int x, int y)
{
  t_pos		tmp;

  tmp.x = x;
  tmp.y = y;
  this->listFakeWall.push_back(tmp);
}

void		Bomberman::addMapByFile(char const * const fileName)
{
  std::ifstream argfile(fileName);
  std::string	tmp;
  int		x = 0, y = 0, i = 0;

  this->listMur.clear();
  if (argfile)
    {
      while (std::getline(argfile, tmp))
	{
	  if (tmp.find("##"))
	    x = 0;
	  for (i = 0; tmp[i] ; ++i)
	    {
	      if (tmp[i] == 'X')
		this->stockPosInList(x, y);
	      if (tmp[i] == 'x')
		this->stockPosInlistFakeWall(x, y);
	      std::cout << tmp[i];
	      if (tmp[i] != '\n' && tmp[i] != '#')
		++x;
	    }
	  std::cout << std::endl;
	  if (tmp.find("##"))
	    ++y;
	}
      this->xMap = x;
      this->yMap = y;
    }
  else
    throw End("File doesnt exist.");
}

bool		Bomberman::checkBomb(int x, int y)
{
  for (int i = PLAYER1; this->listPlayer[(nbPlayer)i] != NULL; ++i)
    {
      for (std::queue<Bomb *> tmp = this->listPlayer[(nbPlayer)i]->getListBomb(); tmp.empty() != true; tmp.pop())
	{
	  if (x == this->listPlayer[(nbPlayer)i]->getListBomb().front()->getX() &&
	      y == this->listPlayer[(nbPlayer)i]->getListBomb().front()->getY())
	    return (false);
	}
    }
  return (true);
}

bool		Bomberman::checkTrueWall(int x, int y)
{
  for (std::list<t_pos>::iterator it = this->listMur.begin(); it != this->listMur.end(); ++it)
    {
      if (x == (*it).x && y == (*it).y)
	return (false);
      if (x < 0 || y < 0)
	return (false);
      if (x > this->xMap - 1 || y > this->yMap - 1) 
	return (false);
    }
  return (true);
}

bool		Bomberman::checkwall(int x, int y)
{
  for (std::list<t_pos>::iterator it = this->listFakeWall.begin(); it != this->listFakeWall.end(); ++it)
    {
      if (x == (*it).x && y == (*it).y)
	return (false);
      if (x < 0 || y < 0)
	return (false);
      if (x > this->xMap - 1 || y > this->yMap - 1) 
	return (false);
    }
  if (this->checkBomb(x, y) == false)
    return (false); 
  return (checkTrueWall(x, y));
}

void		Bomberman::affichPosMur() const
{
  std::cout << "Liste des coordonÃ©es du mur :" << std::endl;
  for (std::list<t_pos>::const_iterator it = this->listMur.begin(); it != this->listMur.end(); it++)
    std::cout << "Ya un mur a x = " << (*it).x << " et y = " << (*it).y << std::endl;
  std::cout << std::endl << "Taille de map : [" << this->xMap << ";" << this->yMap << "]" << std::endl;
}
